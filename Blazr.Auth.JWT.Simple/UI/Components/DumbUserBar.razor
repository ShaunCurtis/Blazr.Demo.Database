@*/// ============================================================
    /// Author: Shaun Curtis, Cold Elm Coders
    /// License: Use And Donate
    /// If you use it, donate something to a charity somewhere
    /// ============================================================*@

@namespace Blazr.Auth.JWT.Simple.UI
@implements IDisposable
<span class="me-2">Change User:</span>
<div class="w-25">
    <select id="userselect" class="form-control" @onchange="ChangeUser">
        @foreach (var kv in DumbAuthenticationStateProvider.TestIdentities)
        {
            @if (kv.Key.Equals(_userId))
            {
                 <option value="@kv.Key" selected>@kv.Value</option>
            }
            else
            {
                <option value="@kv.Key">@kv.Value</option>
            }
        }
    </select>
</div>
<span class="text-nowrap ms-3">
    <AuthorizeView>
        <Authorized>
            Hello, @(context.User.Identity?.Name ?? string.Empty)
        </Authorized>
        <NotAuthorized>
            Not Logged In
        </NotAuthorized>
    </AuthorizeView>
</span>


@code {

    [CascadingParameter] public Task<AuthenticationState>? AuthTask { get; set; }

    [Inject] private AuthenticationStateProvider? AuthStateProvider { get; set; }

    private DumbAuthenticationStateProvider? _simpleAuthProvider => this.AuthStateProvider as DumbAuthenticationStateProvider;

    private System.Security.Claims.ClaimsPrincipal? user;

    private Guid _userId = Guid.Empty;

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthTask!;
        this.user = authState.User;
        AuthStateProvider!.AuthenticationStateChanged += this.OnUserChanged;
    }

    private void ChangeUser(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out Guid Id))
        {
            _userId = Id;
            _simpleAuthProvider?.ChangeIdentity(Id);
        }
    }

    private async void OnUserChanged(Task<AuthenticationState> state)
        => await this.GetUser(state);

    private async Task GetUser(Task<AuthenticationState> state)
    {
        var authState = await state;
        this.user = authState.User;
    }

    public void Dispose()
        => AuthStateProvider!.AuthenticationStateChanged -= this.OnUserChanged;
}
