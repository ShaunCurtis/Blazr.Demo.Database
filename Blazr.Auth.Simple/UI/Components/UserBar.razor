@*/// ============================================================
    /// Author: Shaun Curtis, Cold Elm Coders
    /// License: Use And Donate
    /// If you use it, donate something to a charity somewhere
    /// ============================================================*@

@implements IDisposable
@namespace Blazr.Auth.UI

<span class="mr-2">Change User:</span>
<div class="w-25">
    <select id="userselect" class="form-control" @onchange="ChangeUser">
        @foreach (var value in TestIdentities.IdentityList)
        {
            @if (value.Key == _currentUserId)
            {
                <option value="@value.Key" selected>@value.Value</option>
            }
            else
            {
                <option value="@value.Key">@value.Value</option>
            }
        }
    </select>
</div>
<span class="text-nowrap ms-3">
    <AuthorizeView>
        <Authorized>
            Hello, @this.user!.Identity!.Name
        </Authorized>
        <NotAuthorized>
            Not Logged In
        </NotAuthorized>
    </AuthorizeView>
</span>

@code {

    [CascadingParameter] public Task<AuthenticationState>? AuthTask { get; set; }

    [Inject] private AuthenticationStateProvider? AuthState { get; set; }

    [Inject] private IClientAuthenticationService? ClientAuthenticationService { get; set; }

    private System.Security.Claims.ClaimsPrincipal user = new ClaimsPrincipal();
    private Guid _currentUserId = Guid.Empty;

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthTask!;
        this.user = authState.User;
        AuthState!.AuthenticationStateChanged += this.OnUserChanged;
    }

    private bool GetSelected(string value)
        => user.Identity!.Name!.Equals(value, StringComparison.CurrentCultureIgnoreCase);

    private async Task ChangeUser(ChangeEventArgs e)
    {
        if (e.Value is not null && Guid.TryParse(e.Value.ToString(), out Guid Id))
        {
            await ClientAuthenticationService!.LogInAsync(new IdentityLoginCredentials { Id = Id });
        }
    }

    private async void OnUserChanged(Task<AuthenticationState> state)
        => await this.GetUser(state);

    private async Task GetUser(Task<AuthenticationState> state)
    {
        var authState = await state;
        this.user = authState.User;
    }

    public void Dispose()
        => AuthState!.AuthenticationStateChanged -= this.OnUserChanged;
}
